(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["cosmomathicaInterface`"]


transfer::usage="This function provides an interface to Eisensteins&Hu's fitting formula for the transfer function. It takes the reduced total matter density \!\(\*SubscriptBox[\(\[Omega]\), \(M\)]\), the fraction of baryons \!\(\*SubscriptBox[\(\[CapitalOmega]\), \(b\)]\)/\!\(\*SubscriptBox[\(\[CapitalOmega]\), \(M\)]\), the CMB temperature and the dimensionless Hubble constant as input, and returns the sound horizon, the peak k, the transfer function...";

halofit::usage="This function provides an interface to the halofit algorithm by Smith et al. (reimplemented in C by Martin Kilbinger). It takes the total matter density \!\(\*SubscriptBox[\(\[CapitalOmega]\), \(M\)]\), the vacuum energy density \!\(\*SubscriptBox[\(\[CapitalOmega]\), \(L\)]\), a shape factor, \!\(\*SubscriptBox[\(\[Sigma]\), \(8\)]\), \!\(\*SubscriptBox[\(n\), \(s\)]\), \!\(\*SubscriptBox[\(\[Beta]\), \(p\)]\), and a fixed redshift \!\(\*SubscriptBox[\(z\), \(0\)]\) as input, and returns the nonlinear matter power spectrum (computed in three ways: ...) at 20 different values of the scale factor and the convergence power spectrum in tabulated form.";

cosmicemu::usage="This function provides an interface to the CosmicEmulator by Earl Lawrence. It takes \!\(\*SubscriptBox[\(\[Omega]\), \(M\)]\), \!\(\*SubscriptBox[\(\[Omega]\), \(b\)]\), \!\(\*SubscriptBox[\(\[Sigma]\), \(8\)]\), \!\(\*SubscriptBox[\(n\), \(s\)]\), and the equation of state w, and returns the nonlinear matter power spectrum at five different redshifts as well as ...";

camb::usage="This function provides an interface to CAMB by Antony Lewis and Anthony Challinor. It takes \!\(\*SubscriptBox[\(\[CapitalOmega]\), \(C\)]\), ..., as well as a number of options as input, and returns various cosmological quantities. The distinction between parameters and options is in principle arbitrary. However, since some physical parameters are often assumed to take on a default value, they are being interpreted as an option here. The default options are ...";


Interface::CosmicEmu="Parameter out of bounds. `3` <= `1` <= `4` required, but `1`=`2`.";


Begin["`Private`"]


$location=DirectoryName[$InputFileName];


(*Transfer function*)
transfer[omegaM_?NumericQ,fBaryon_?NumericQ,Tcmb_?NumericQ,h_?NumericQ]:=Module[{result,link,fitonek,horizon,peak},

link=Install[$location<>"ext/math_link"];

Global`TFSetParameters[N@omegaM,N@fBaryon,N@Tcmb];

fitonek[k_]:={Sequence@@Global`TFFitOneK[k],
Global`TFNoWiggles[N@omegaM,N@fBaryon,N@h,N@Tcmb,k],
Global`TFZeroBaryon[N@omegaM,N@h,N@Tcmb,k]}; 

result=Table[{10^lk,fitonek[10^lk]},{lk,-6.,4.,.01}];
horizon=Global`TFSoundHorizon[N@omegaM,N@fBaryon,N@h];
peak=Global`TFkPeak[N@omegaM,N@fBaryon,N@h];

Uninstall[link];

{horizon,peak,result}
];


halofit[OmegaM_?NumericQ,OmegaL_?NumericQ,gammaShape_?NumericQ,sigma8_?NumericQ,ns_?NumericQ,betaP_?NumericQ,z0_?NumericQ]:=Module[{link,Pk={},Kappa={},arange,krange,ellrange},
link=Install[$location<>"ext/math_link"];

arange=Range[.01,.9999,.04]~Join~{.99999};
krange=10^Range[-4,3,.1];
ellrange=10^Range[-2,6,.1];

Do[
Global`HFSetParameters[N@OmegaM,N@OmegaL,N@gammaShape,N@sigma8,N@ns,N@betaP,N@z0,i];
AppendTo[Pk,Table[Global`HFGetPkNL[a,k],{a,arange},{k,krange}]];
AppendTo[Kappa,Table[Global`HFGetKappa[ell],{ell,ellrange}]],
{i,0,2}]

Uninstall[link];

(*Just return the raw numbers*)
{{arange,krange,Pk},{ellrange,Kappa}}
];


cosmicemu[omegaM_?NumericQ,omegaB_?NumericQ,sigma8_?NumericQ,ns_?NumericQ,w_?NumericQ]:=Module[{link,result,labels,limits,parameters,check},

labels={"\!\(\*SubscriptBox[\(\[Omega]\), \(M\)]\)","\!\(\*SubscriptBox[\(\[Omega]\), \(b\)]\)","\!\(\*SubscriptBox[\(n\), \(s\)]\)","\!\(\*SubscriptBox[\(\[Sigma]\), \(8\)]\)","w"};
limits={{.12,.155},{.0214,.0235},{.85,1.05},{.61,.9},{-1.3,-.7}};
(*these are hard limits as given by the authors of the cosmic emulator - the program will crash if any parameter is outside its bounds*)
parameters={omegaM,omegaB,sigma8,ns,w};

check=(#[[2,1]]<=#[[1]]<=#[[2,2]])&/@Transpose[{parameters,limits}];
Do[If[!check[[i]],Message[Interface::CosmicEmu,labels[[i]],parameters[[i]],limits[[i,1]],limits[[i,2]]]],{i,Length@check}];
If[!And@@check,Return[$Failed];Abort[]];

link=Install[$location<>"ext/math_link"];

result=Table[{1/a-1,Global`CEGetPkNL[N@omegaM,N@omegaB,N@sigma8,N@ns,N@w,1/a-1]},{a,.5,1.,.1}];
 (*CosmicEmu only does these five redshifts, everything else is interpolated*)

Uninstall[link];

(*Just return the raw numbers*)
result
];


camb[OmegaC_?NumericQ,OmegaB_?NumericQ,OmegaL_?NumericQ,h_?NumericQ,w_?NumericQ,opts:OptionsPattern[]]:=Module[{link,result,floats,ints},

link=Install[$location<>"ext/math_link"];

floats={OmegaC,OmegaB,OmegaL,OptionValue[Tcmb]};
ints={1,0,1};
result=Global`CAMBrun[N/@floats,ints];

Uninstall[link];

result
];
SetOptions[camb,Tcmb->2.725,OmegaNu->0]


End[ ]
EndPackage[ ]



